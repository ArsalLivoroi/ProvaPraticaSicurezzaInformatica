#ifndef _compresshpp
#define _compresshpp

#include "sha256_util.hpp"

void compress_1(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=h + w0 + CH(e, f, g) + ep1(e);
s_out.channel[7]<<g;
s_out.channel[6]<<f;
s_out.channel[5]<<e;
s_out.channel[4]<<d + x0;
s_out.channel[3]<<c;
s_out.channel[2]<<b;
s_out.channel[1]<<a;
s_out.channel[0]<<x0 + MAJ(a, b, c) + ep0(a);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
}
}
void compress_2(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=h + w0 + CH(e, f, g) + ep1(e);
uint x1=d + x0;
uint x2=g + w1 + CH(x1, e, f) + ep1(x1);
uint x3=x0 + MAJ(a, b, c) + ep0(a);
s_out.channel[7]<<f;
s_out.channel[6]<<e;
s_out.channel[5]<<x1;
s_out.channel[4]<<c + x2;
s_out.channel[3]<<b;
s_out.channel[2]<<a;
s_out.channel[1]<<x3;
s_out.channel[0]<<x2 + MAJ(x3, a, b) + ep0(x3);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
}
}
void compress_3(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=h + w0 + CH(e, f, g) + ep1(e);
uint x1=d + x0;
uint x2=g + w1 + CH(x1, e, f) + ep1(x1);
uint x3=c + x2;
uint x4=f + w2 + CH(x3, x1, e) + ep1(x3);
uint x5=x0 + MAJ(a, b, c) + ep0(a);
uint x6=x2 + MAJ(x5, a, b) + ep0(x5);
s_out.channel[7]<<e;
s_out.channel[6]<<x1;
s_out.channel[5]<<x3;
s_out.channel[4]<<b + x4;
s_out.channel[3]<<a;
s_out.channel[2]<<x5;
s_out.channel[1]<<x6;
s_out.channel[0]<<x4 + MAJ(x6, x5, a) + ep0(x6);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
}
}
void compress_4(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=h + w0 + CH(e, f, g) + ep1(e);
uint x1=d + x0;
uint x2=g + w1 + CH(x1, e, f) + ep1(x1);
uint x3=c + x2;
uint x4=f + w2 + CH(x3, x1, e) + ep1(x3);
uint x5=b + x4;
uint x6=e + w3 + CH(x5, x3, x1) + ep1(x5);
uint x7=x0 + MAJ(a, b, c) + ep0(a);
uint x8=x2 + MAJ(x7, a, b) + ep0(x7);
uint x9=x4 + MAJ(x8, x7, a) + ep0(x8);
s_out.channel[7]<<x1;
s_out.channel[6]<<x3;
s_out.channel[5]<<x5;
s_out.channel[4]<<a + x6;
s_out.channel[3]<<x7;
s_out.channel[2]<<x8;
s_out.channel[1]<<x9;
s_out.channel[0]<<x6 + MAJ(x9, x8, x7) + ep0(x9);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
}
}
void compress_5(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=g + w1 + CH(x3, e, f) + ep1(x3);
uint x5=c + x4;
uint x6=f + w2 + CH(x5, x3, e) + ep1(x5);
uint x7=b + x6;
uint x8=e + w3 + CH(x7, x5, x3) + ep1(x7);
uint x9=a + x8;
uint x10=MAJ(a, b, c) + ep0(a);
uint x11=w4 + CH(x9, x7, x5) + ep1(x9);
uint x12=x10 + x2;
uint x13=x4 + MAJ(x12, a, b) + ep0(x12);
uint x14=x6 + MAJ(x13, x12, a) + ep0(x13);
uint x15=x8 + MAJ(x14, x13, x12) + ep0(x14);
s_out.channel[7]<<x5;
s_out.channel[6]<<x7;
s_out.channel[5]<<x9;
s_out.channel[4]<<d + 2*h + 2*w0 + 2*x0 + 2*x1 + x10 + x11;
s_out.channel[3]<<x13;
s_out.channel[2]<<x14;
s_out.channel[1]<<x15;
s_out.channel[0]<<x11 + x3 + MAJ(x15, x14, x13) + ep0(x15);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
}
}
void compress_6(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=f + w2 + CH(x7, x3, e) + ep1(x7);
uint x9=b + x8;
uint x10=e + w3 + CH(x9, x7, x3) + ep1(x9);
uint x11=a + x10;
uint x12=MAJ(a, b, c) + ep0(a);
uint x13=w4 + CH(x11, x9, x7) + ep1(x11);
uint x14=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x12 + x13;
uint x15=x12 + x2;
uint x16=MAJ(x15, a, b) + ep0(x15);
uint x17=w5 + CH(x14, x11, x9) + ep1(x14);
uint x18=x16 + x6;
uint x19=x8 + MAJ(x18, x15, a) + ep0(x18);
uint x20=x10 + MAJ(x19, x18, x15) + ep0(x19);
uint x21=x13 + x3 + MAJ(x20, x19, x18) + ep0(x20);
s_out.channel[7]<<x9;
s_out.channel[6]<<x11;
s_out.channel[5]<<x14;
s_out.channel[4]<<c + 2*g + 2*w1 + x16 + x17 + 2*x4 + 2*x5;
s_out.channel[3]<<x19;
s_out.channel[2]<<x20;
s_out.channel[1]<<x21;
s_out.channel[0]<<x17 + x7 + MAJ(x21, x20, x19) + ep0(x21);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
}
}
void compress_7(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=f + w2 + x8 + x9;
uint x11=b + x10;
uint x12=e + w3 + CH(x11, x7, x3) + ep1(x11);
uint x13=a + x12;
uint x14=MAJ(a, b, c) + ep0(a);
uint x15=w4 + CH(x13, x11, x7) + ep1(x13);
uint x16=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x14 + x15;
uint x17=x14 + x2;
uint x18=MAJ(x17, a, b) + ep0(x17);
uint x19=w5 + CH(x16, x13, x11) + ep1(x16);
uint x20=c + 2*g + 2*w1 + x18 + x19 + 2*x4 + 2*x5;
uint x21=x18 + x6;
uint x22=MAJ(x21, x17, a) + ep0(x21);
uint x23=w6 + CH(x20, x16, x13) + ep1(x20);
uint x24=x10 + x22;
uint x25=x12 + MAJ(x24, x21, x17) + ep0(x24);
uint x26=x15 + x3 + MAJ(x25, x24, x21) + ep0(x25);
uint x27=x19 + x7 + MAJ(x26, x25, x24) + ep0(x26);
s_out.channel[7]<<x13;
s_out.channel[6]<<x16;
s_out.channel[5]<<x20;
s_out.channel[4]<<b + 2*f + 2*w2 + x22 + x23 + 2*x8 + 2*x9;
s_out.channel[3]<<x25;
s_out.channel[2]<<x26;
s_out.channel[1]<<x27;
s_out.channel[0]<<x11 + x23 + MAJ(x27, x26, x25) + ep0(x27);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
}
}
void compress_8(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=MAJ(a, b, c) + ep0(a);
uint x3=h + w0 + x0 + x1;
uint x4=d + x3;
uint x5=CH(x4, e, f);
uint x6=ep1(x4);
uint x7=g + w1 + x5 + x6;
uint x8=c + x7;
uint x9=CH(x8, x4, e);
uint x10=ep1(x8);
uint x11=f + w2 + x10 + x9;
uint x12=b + x11;
uint x13=CH(x12, x8, x4);
uint x14=ep1(x12);
uint x15=e + w3 + x13 + x14;
uint x16=a + x15;
uint x17=w4 + CH(x16, x12, x8) + ep1(x16);
uint x18=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x17 + x2;
uint x19=x2 + x3;
uint x20=MAJ(x19, a, b) + ep0(x19);
uint x21=w5 + CH(x18, x16, x12) + ep1(x18);
uint x22=c + 2*g + 2*w1 + x20 + x21 + 2*x5 + 2*x6;
uint x23=x20 + x7;
uint x24=MAJ(x23, x19, a) + ep0(x23);
uint x25=w6 + CH(x22, x18, x16) + ep1(x22);
uint x26=b + 2*f + 2*w2 + 2*x10 + x24 + x25 + 2*x9;
uint x27=x11 + x24;
uint x28=MAJ(x27, x23, x19) + ep0(x27);
uint x29=w7 + CH(x26, x22, x18) + ep1(x26);
uint x30=x15 + x28;
uint x31=x17 + x4 + MAJ(x30, x27, x23) + ep0(x30);
uint x32=x21 + x8 + MAJ(x31, x30, x27) + ep0(x31);
uint x33=x12 + x25 + MAJ(x32, x31, x30) + ep0(x32);
s_out.channel[7]<<x18;
s_out.channel[6]<<x22;
s_out.channel[5]<<x26;
s_out.channel[4]<<a + 2*e + 2*w3 + 2*x13 + 2*x14 + x28 + x29;
s_out.channel[3]<<x31;
s_out.channel[2]<<x32;
s_out.channel[1]<<x33;
s_out.channel[0]<<x16 + x29 + MAJ(x33, x32, x31) + ep0(x33);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
}
}
void compress_9(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=MAJ(a, b, c) + ep0(a);
uint x7=x2 + x6;
uint x8=MAJ(x7, a, b) + ep0(x7);
uint x9=g + w1 + x4 + x5;
uint x10=c + x9;
uint x11=CH(x10, x3, e);
uint x12=ep1(x10);
uint x13=f + w2 + x11 + x12;
uint x14=b + x13;
uint x15=CH(x14, x10, x3);
uint x16=ep1(x14);
uint x17=e + w3 + x15 + x16;
uint x18=a + x17;
uint x19=CH(x18, x14, x10);
uint x20=ep1(x18);
uint x21=w4 + x19 + x20;
uint x22=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x21 + x6;
uint x23=w5 + CH(x22, x18, x14) + ep1(x22);
uint x24=c + 2*g + 2*w1 + x23 + 2*x4 + 2*x5 + x8;
uint x25=x8 + x9;
uint x26=MAJ(x25, x7, a) + ep0(x25);
uint x27=w6 + CH(x24, x22, x18) + ep1(x24);
uint x28=b + 2*f + 2*w2 + 2*x11 + 2*x12 + x26 + x27;
uint x29=x13 + x26;
uint x30=MAJ(x29, x25, x7) + ep0(x29);
uint x31=w7 + CH(x28, x24, x22) + ep1(x28);
uint x32=a + 2*e + 2*w3 + 2*x15 + 2*x16 + x30 + x31;
uint x33=x17 + x30;
uint x34=MAJ(x33, x29, x25) + ep0(x33);
uint x35=w8 + CH(x32, x28, x24) + ep1(x32);
uint x36=x21 + x3 + x34;
uint x37=x10 + x23 + MAJ(x36, x33, x29) + ep0(x36);
uint x38=x14 + x27 + MAJ(x37, x36, x33) + ep0(x37);
uint x39=x18 + x31 + MAJ(x38, x37, x36) + ep0(x38);
s_out.channel[7]<<x24;
s_out.channel[6]<<x28;
s_out.channel[5]<<x32;
s_out.channel[4]<<2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x19 + 2*x20 + x34 + x35 + x6;
s_out.channel[3]<<x37;
s_out.channel[2]<<x38;
s_out.channel[1]<<x39;
s_out.channel[0]<<x22 + x35 + MAJ(x39, x38, x37) + ep0(x39);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
}
}
void compress_10(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=MAJ(a, b, c) + ep0(a);
uint x11=x10 + x2;
uint x12=MAJ(x11, a, b) + ep0(x11);
uint x13=x12 + x6;
uint x14=MAJ(x13, x11, a) + ep0(x13);
uint x15=f + w2 + x8 + x9;
uint x16=b + x15;
uint x17=CH(x16, x7, x3);
uint x18=ep1(x16);
uint x19=e + w3 + x17 + x18;
uint x20=a + x19;
uint x21=CH(x20, x16, x7);
uint x22=ep1(x20);
uint x23=w4 + x21 + x22;
uint x24=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x10 + x23;
uint x25=CH(x24, x20, x16);
uint x26=ep1(x24);
uint x27=w5 + x25 + x26;
uint x28=c + 2*g + 2*w1 + x12 + x27 + 2*x4 + 2*x5;
uint x29=w6 + CH(x28, x24, x20) + ep1(x28);
uint x30=b + 2*f + 2*w2 + x14 + x29 + 2*x8 + 2*x9;
uint x31=x14 + x15;
uint x32=MAJ(x31, x13, x11) + ep0(x31);
uint x33=w7 + CH(x30, x28, x24) + ep1(x30);
uint x34=a + 2*e + 2*w3 + 2*x17 + 2*x18 + x32 + x33;
uint x35=x19 + x32;
uint x36=MAJ(x35, x31, x13) + ep0(x35);
uint x37=w8 + CH(x34, x30, x28) + ep1(x34);
uint x38=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + x10 + 2*x21 + 2*x22 + x36 + x37;
uint x39=x23 + x3 + x36;
uint x40=MAJ(x39, x35, x31) + ep0(x39);
uint x41=w9 + CH(x38, x34, x30) + ep1(x38);
uint x42=x27 + x40 + x7;
uint x43=x16 + x29 + MAJ(x42, x39, x35) + ep0(x42);
uint x44=x20 + x33 + MAJ(x43, x42, x39) + ep0(x43);
uint x45=x24 + x37 + MAJ(x44, x43, x42) + ep0(x44);
s_out.channel[7]<<x30;
s_out.channel[6]<<x34;
s_out.channel[5]<<x38;
s_out.channel[4]<<2*c + 3*g + 3*w1 + 2*w5 + x12 + 2*x25 + 2*x26 + 3*x4 + x40 + x41 + 3*x5;
s_out.channel[3]<<x43;
s_out.channel[2]<<x44;
s_out.channel[1]<<x45;
s_out.channel[0]<<x28 + x41 + MAJ(x45, x44, x43) + ep0(x45);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
}
}
void compress_11(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=f + w2 + x8 + x9;
uint x11=b + x10;
uint x12=CH(x11, x7, x3);
uint x13=ep1(x11);
uint x14=MAJ(a, b, c) + ep0(a);
uint x15=x14 + x2;
uint x16=MAJ(x15, a, b) + ep0(x15);
uint x17=x16 + x6;
uint x18=MAJ(x17, x15, a) + ep0(x17);
uint x19=x10 + x18;
uint x20=MAJ(x19, x17, x15) + ep0(x19);
uint x21=e + w3 + x12 + x13;
uint x22=a + x21;
uint x23=CH(x22, x11, x7);
uint x24=ep1(x22);
uint x25=w4 + x23 + x24;
uint x26=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x14 + x25;
uint x27=CH(x26, x22, x11);
uint x28=ep1(x26);
uint x29=w5 + x27 + x28;
uint x30=c + 2*g + 2*w1 + x16 + x29 + 2*x4 + 2*x5;
uint x31=CH(x30, x26, x22);
uint x32=ep1(x30);
uint x33=w6 + x31 + x32;
uint x34=b + 2*f + 2*w2 + x18 + x33 + 2*x8 + 2*x9;
uint x35=w7 + CH(x34, x30, x26) + ep1(x34);
uint x36=a + 2*e + 2*w3 + 2*x12 + 2*x13 + x20 + x35;
uint x37=x20 + x21;
uint x38=MAJ(x37, x19, x17) + ep0(x37);
uint x39=w8 + CH(x36, x34, x30) + ep1(x36);
uint x40=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + x14 + 2*x23 + 2*x24 + x38 + x39;
uint x41=x25 + x3 + x38;
uint x42=MAJ(x41, x37, x19) + ep0(x41);
uint x43=w9 + CH(x40, x36, x34) + ep1(x40);
uint x44=2*c + 3*g + 3*w1 + 2*w5 + x16 + 2*x27 + 2*x28 + 3*x4 + x42 + x43 + 3*x5;
uint x45=x29 + x42 + x7;
uint x46=MAJ(x45, x41, x37) + ep0(x45);
uint x47=w10 + CH(x44, x40, x36) + ep1(x44);
uint x48=x11 + x33 + x46;
uint x49=x22 + x35 + MAJ(x48, x45, x41) + ep0(x48);
uint x50=x26 + x39 + MAJ(x49, x48, x45) + ep0(x49);
uint x51=x30 + x43 + MAJ(x50, x49, x48) + ep0(x50);
s_out.channel[7]<<x36;
s_out.channel[6]<<x40;
s_out.channel[5]<<x44;
s_out.channel[4]<<2*b + 3*f + 3*w2 + 2*w6 + x18 + 2*x31 + 2*x32 + x46 + x47 + 3*x8 + 3*x9;
s_out.channel[3]<<x49;
s_out.channel[2]<<x50;
s_out.channel[1]<<x51;
s_out.channel[0]<<x34 + x47 + MAJ(x51, x50, x49) + ep0(x51);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
}
}
void compress_12(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=f + w2 + x8 + x9;
uint x11=b + x10;
uint x12=CH(x11, x7, x3);
uint x13=ep1(x11);
uint x14=e + w3 + x12 + x13;
uint x15=a + x14;
uint x16=CH(x15, x11, x7);
uint x17=ep1(x15);
uint x18=MAJ(a, b, c) + ep0(a);
uint x19=x18 + x2;
uint x20=MAJ(x19, a, b) + ep0(x19);
uint x21=x20 + x6;
uint x22=MAJ(x21, x19, a) + ep0(x21);
uint x23=x10 + x22;
uint x24=MAJ(x23, x21, x19) + ep0(x23);
uint x25=x14 + x24;
uint x26=MAJ(x25, x23, x21) + ep0(x25);
uint x27=w4 + x16 + x17;
uint x28=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x18 + x27;
uint x29=CH(x28, x15, x11);
uint x30=ep1(x28);
uint x31=w5 + x29 + x30;
uint x32=c + 2*g + 2*w1 + x20 + x31 + 2*x4 + 2*x5;
uint x33=CH(x32, x28, x15);
uint x34=ep1(x32);
uint x35=w6 + x33 + x34;
uint x36=b + 2*f + 2*w2 + x22 + x35 + 2*x8 + 2*x9;
uint x37=CH(x36, x32, x28);
uint x38=ep1(x36);
uint x39=w7 + x37 + x38;
uint x40=a + 2*e + 2*w3 + 2*x12 + 2*x13 + x24 + x39;
uint x41=w8 + CH(x40, x36, x32) + ep1(x40);
uint x42=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x16 + 2*x17 + x18 + x26 + x41;
uint x43=x26 + x27 + x3;
uint x44=MAJ(x43, x25, x23) + ep0(x43);
uint x45=w9 + CH(x42, x40, x36) + ep1(x42);
uint x46=2*c + 3*g + 3*w1 + 2*w5 + x20 + 2*x29 + 2*x30 + 3*x4 + x44 + x45 + 3*x5;
uint x47=x31 + x44 + x7;
uint x48=MAJ(x47, x43, x25) + ep0(x47);
uint x49=w10 + CH(x46, x42, x40) + ep1(x46);
uint x50=2*b + 3*f + 3*w2 + 2*w6 + x22 + 2*x33 + 2*x34 + x48 + x49 + 3*x8 + 3*x9;
uint x51=x11 + x35 + x48;
uint x52=MAJ(x51, x47, x43) + ep0(x51);
uint x53=w11 + CH(x50, x46, x42) + ep1(x50);
uint x54=x15 + x39 + x52;
uint x55=x28 + x41 + MAJ(x54, x51, x47) + ep0(x54);
uint x56=x32 + x45 + MAJ(x55, x54, x51) + ep0(x55);
uint x57=x36 + x49 + MAJ(x56, x55, x54) + ep0(x56);
s_out.channel[7]<<x42;
s_out.channel[6]<<x46;
s_out.channel[5]<<x50;
s_out.channel[4]<<2*a + 3*e + 3*w3 + 2*w7 + 3*x12 + 3*x13 + x24 + 2*x37 + 2*x38 + x52 + x53;
s_out.channel[3]<<x55;
s_out.channel[2]<<x56;
s_out.channel[1]<<x57;
s_out.channel[0]<<x40 + x53 + MAJ(x57, x56, x55) + ep0(x57);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
}
}
void compress_13(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=MAJ(a, b, c);
uint x3=ep0(a);
uint x4=x2 + x3;
uint x5=h + w0 + x0 + x1;
uint x6=d + x5;
uint x7=CH(x6, e, f);
uint x8=ep1(x6);
uint x9=g + w1 + x7 + x8;
uint x10=c + x9;
uint x11=CH(x10, x6, e);
uint x12=ep1(x10);
uint x13=f + w2 + x11 + x12;
uint x14=b + x13;
uint x15=CH(x14, x10, x6);
uint x16=ep1(x14);
uint x17=e + w3 + x15 + x16;
uint x18=a + x17;
uint x19=CH(x18, x14, x10);
uint x20=ep1(x18);
uint x21=w4 + x19 + x20;
uint x22=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x21 + x4;
uint x23=CH(x22, x18, x14);
uint x24=ep1(x22);
uint x25=x4 + x5;
uint x26=MAJ(x25, a, b) + ep0(x25);
uint x27=x26 + x9;
uint x28=MAJ(x27, x25, a) + ep0(x27);
uint x29=x13 + x28;
uint x30=MAJ(x29, x27, x25) + ep0(x29);
uint x31=x17 + x30;
uint x32=MAJ(x31, x29, x27) + ep0(x31);
uint x33=x21 + x32 + x6;
uint x34=MAJ(x33, x31, x29) + ep0(x33);
uint x35=w5 + x23 + x24;
uint x36=c + 2*g + 2*w1 + x26 + x35 + 2*x7 + 2*x8;
uint x37=CH(x36, x22, x18);
uint x38=ep1(x36);
uint x39=w6 + x37 + x38;
uint x40=b + 2*f + 2*w2 + 2*x11 + 2*x12 + x28 + x39;
uint x41=CH(x40, x36, x22);
uint x42=ep1(x40);
uint x43=w7 + x41 + x42;
uint x44=a + 2*e + 2*w3 + 2*x15 + 2*x16 + x30 + x43;
uint x45=CH(x44, x40, x36);
uint x46=ep1(x44);
uint x47=w8 + x45 + x46;
uint x48=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x19 + 2*x20 + x32 + x4 + x47;
uint x49=w9 + CH(x48, x44, x40) + ep1(x48);
uint x50=2*c + 3*g + 3*w1 + 2*w5 + 2*x23 + 2*x24 + x26 + x34 + x49 + 3*x7 + 3*x8;
uint x51=x10 + x34 + x35;
uint x52=MAJ(x51, x33, x31) + ep0(x51);
uint x53=w10 + CH(x50, x48, x44) + ep1(x50);
uint x54=2*b + 3*f + 3*w2 + 2*w6 + 3*x11 + 3*x12 + x28 + 2*x37 + 2*x38 + x52 + x53;
uint x55=x14 + x39 + x52;
uint x56=MAJ(x55, x51, x33) + ep0(x55);
uint x57=w11 + CH(x54, x50, x48) + ep1(x54);
uint x58=2*a + 3*e + 3*w3 + 2*w7 + 3*x15 + 3*x16 + x30 + 2*x41 + 2*x42 + x56 + x57;
uint x59=x18 + x43 + x56;
uint x60=MAJ(x59, x55, x51) + ep0(x59);
uint x61=w12 + CH(x58, x54, x50) + ep1(x58);
uint x62=x22 + x47 + x60;
uint x63=x36 + x49 + MAJ(x62, x59, x55) + ep0(x62);
uint x64=x40 + x53 + MAJ(x63, x62, x59) + ep0(x63);
uint x65=x44 + x57 + MAJ(x64, x63, x62) + ep0(x64);
s_out.channel[7]<<x50;
s_out.channel[6]<<x54;
s_out.channel[5]<<x58;
s_out.channel[4]<<3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 3*x19 + 2*x2 + 3*x20 + 2*x3 + x32 + 2*x45 + 2*x46 + x60 + x61;
s_out.channel[3]<<x63;
s_out.channel[2]<<x64;
s_out.channel[1]<<x65;
s_out.channel[0]<<x48 + x61 + MAJ(x65, x64, x63) + ep0(x65);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
}
}
void compress_14(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=MAJ(a, b, c);
uint x7=ep0(a);
uint x8=x6 + x7;
uint x9=x2 + x8;
uint x10=MAJ(x9, a, b);
uint x11=ep0(x9);
uint x12=x10 + x11;
uint x13=g + w1 + x4 + x5;
uint x14=c + x13;
uint x15=CH(x14, x3, e);
uint x16=ep1(x14);
uint x17=f + w2 + x15 + x16;
uint x18=b + x17;
uint x19=CH(x18, x14, x3);
uint x20=ep1(x18);
uint x21=e + w3 + x19 + x20;
uint x22=a + x21;
uint x23=CH(x22, x18, x14);
uint x24=ep1(x22);
uint x25=w4 + x23 + x24;
uint x26=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x25 + x8;
uint x27=CH(x26, x22, x18);
uint x28=ep1(x26);
uint x29=w5 + x27 + x28;
uint x30=c + 2*g + 2*w1 + x12 + x29 + 2*x4 + 2*x5;
uint x31=CH(x30, x26, x22);
uint x32=ep1(x30);
uint x33=x12 + x13;
uint x34=MAJ(x33, x9, a) + ep0(x33);
uint x35=x17 + x34;
uint x36=MAJ(x35, x33, x9) + ep0(x35);
uint x37=x21 + x36;
uint x38=MAJ(x37, x35, x33) + ep0(x37);
uint x39=x25 + x3 + x38;
uint x40=MAJ(x39, x37, x35) + ep0(x39);
uint x41=x14 + x29 + x40;
uint x42=MAJ(x41, x39, x37) + ep0(x41);
uint x43=w6 + x31 + x32;
uint x44=b + 2*f + 2*w2 + 2*x15 + 2*x16 + x34 + x43;
uint x45=CH(x44, x30, x26);
uint x46=ep1(x44);
uint x47=w7 + x45 + x46;
uint x48=a + 2*e + 2*w3 + 2*x19 + 2*x20 + x36 + x47;
uint x49=CH(x48, x44, x30);
uint x50=ep1(x48);
uint x51=w8 + x49 + x50;
uint x52=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x23 + 2*x24 + x38 + x51 + x8;
uint x53=CH(x52, x48, x44);
uint x54=ep1(x52);
uint x55=w9 + x53 + x54;
uint x56=2*c + 3*g + 3*w1 + 2*w5 + x12 + 2*x27 + 2*x28 + 3*x4 + x40 + 3*x5 + x55;
uint x57=w10 + CH(x56, x52, x48) + ep1(x56);
uint x58=2*b + 3*f + 3*w2 + 2*w6 + 3*x15 + 3*x16 + 2*x31 + 2*x32 + x34 + x42 + x57;
uint x59=x18 + x42 + x43;
uint x60=MAJ(x59, x41, x39) + ep0(x59);
uint x61=w11 + CH(x58, x56, x52) + ep1(x58);
uint x62=2*a + 3*e + 3*w3 + 2*w7 + 3*x19 + 3*x20 + x36 + 2*x45 + 2*x46 + x60 + x61;
uint x63=x22 + x47 + x60;
uint x64=MAJ(x63, x59, x41) + ep0(x63);
uint x65=w12 + CH(x62, x58, x56) + ep1(x62);
uint x66=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 3*x23 + 3*x24 + x38 + 2*x49 + 2*x50 + 2*x6 + x64 + x65 + 2*x7;
uint x67=x26 + x51 + x64;
uint x68=MAJ(x67, x63, x59) + ep0(x67);
uint x69=w13 + CH(x66, x62, x58) + ep1(x66);
uint x70=x30 + x55 + x68;
uint x71=x44 + x57 + MAJ(x70, x67, x63) + ep0(x70);
uint x72=x48 + x61 + MAJ(x71, x70, x67) + ep0(x71);
uint x73=x52 + x65 + MAJ(x72, x71, x70) + ep0(x72);
s_out.channel[7]<<x58;
s_out.channel[6]<<x62;
s_out.channel[5]<<x66;
s_out.channel[4]<<3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x10 + 2*x11 + 3*x27 + 3*x28 + 5*x4 + x40 + 5*x5 + 2*x53 + 2*x54 + x68 + x69;
s_out.channel[3]<<x71;
s_out.channel[2]<<x72;
s_out.channel[1]<<x73;
s_out.channel[0]<<x56 + x69 + MAJ(x73, x72, x71) + ep0(x73);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
}
}
void compress_15(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=MAJ(a, b, c);
uint x11=ep0(a);
uint x12=x10 + x11;
uint x13=x12 + x2;
uint x14=MAJ(x13, a, b);
uint x15=ep0(x13);
uint x16=x14 + x15;
uint x17=x16 + x6;
uint x18=MAJ(x17, x13, a);
uint x19=ep0(x17);
uint x20=x18 + x19;
uint x21=f + w2 + x8 + x9;
uint x22=b + x21;
uint x23=CH(x22, x7, x3);
uint x24=ep1(x22);
uint x25=e + w3 + x23 + x24;
uint x26=a + x25;
uint x27=CH(x26, x22, x7);
uint x28=ep1(x26);
uint x29=w4 + x27 + x28;
uint x30=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x12 + x29;
uint x31=CH(x30, x26, x22);
uint x32=ep1(x30);
uint x33=w5 + x31 + x32;
uint x34=c + 2*g + 2*w1 + x16 + x33 + 2*x4 + 2*x5;
uint x35=CH(x34, x30, x26);
uint x36=ep1(x34);
uint x37=w6 + x35 + x36;
uint x38=b + 2*f + 2*w2 + x20 + x37 + 2*x8 + 2*x9;
uint x39=CH(x38, x34, x30);
uint x40=ep1(x38);
uint x41=x20 + x21;
uint x42=MAJ(x41, x17, x13) + ep0(x41);
uint x43=x25 + x42;
uint x44=MAJ(x43, x41, x17) + ep0(x43);
uint x45=x29 + x3 + x44;
uint x46=MAJ(x45, x43, x41) + ep0(x45);
uint x47=x33 + x46 + x7;
uint x48=MAJ(x47, x45, x43) + ep0(x47);
uint x49=x22 + x37 + x48;
uint x50=MAJ(x49, x47, x45) + ep0(x49);
uint x51=w7 + x39 + x40;
uint x52=a + 2*e + 2*w3 + 2*x23 + 2*x24 + x42 + x51;
uint x53=CH(x52, x38, x34);
uint x54=ep1(x52);
uint x55=w8 + x53 + x54;
uint x56=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + x12 + 2*x27 + 2*x28 + x44 + x55;
uint x57=CH(x56, x52, x38);
uint x58=ep1(x56);
uint x59=w9 + x57 + x58;
uint x60=2*c + 3*g + 3*w1 + 2*w5 + x16 + 2*x31 + 2*x32 + 3*x4 + x46 + 3*x5 + x59;
uint x61=CH(x60, x56, x52);
uint x62=ep1(x60);
uint x63=w10 + x61 + x62;
uint x64=2*b + 3*f + 3*w2 + 2*w6 + x20 + 2*x35 + 2*x36 + x48 + x63 + 3*x8 + 3*x9;
uint x65=w11 + CH(x64, x60, x56) + ep1(x64);
uint x66=2*a + 3*e + 3*w3 + 2*w7 + 3*x23 + 3*x24 + 2*x39 + 2*x40 + x42 + x50 + x65;
uint x67=x26 + x50 + x51;
uint x68=MAJ(x67, x49, x47) + ep0(x67);
uint x69=w12 + CH(x66, x64, x60) + ep1(x66);
uint x70=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 2*x10 + 2*x11 + 3*x27 + 3*x28 + x44 + 2*x53 + 2*x54 + x68 + x69;
uint x71=x30 + x55 + x68;
uint x72=MAJ(x71, x67, x49) + ep0(x71);
uint x73=w13 + CH(x70, x66, x64) + ep1(x70);
uint x74=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x14 + 2*x15 + 3*x31 + 3*x32 + 5*x4 + x46 + 5*x5 + 2*x57 + 2*x58 + x72 + x73;
uint x75=x34 + x59 + x72;
uint x76=MAJ(x75, x71, x67) + ep0(x75);
uint x77=w14 + CH(x74, x70, x66) + ep1(x74);
uint x78=x38 + x63 + x76;
uint x79=x52 + x65 + MAJ(x78, x75, x71) + ep0(x78);
uint x80=x56 + x69 + MAJ(x79, x78, x75) + ep0(x79);
uint x81=x60 + x73 + MAJ(x80, x79, x78) + ep0(x80);
s_out.channel[7]<<x66;
s_out.channel[6]<<x70;
s_out.channel[5]<<x74;
s_out.channel[4]<<3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 2*x18 + 2*x19 + 3*x35 + 3*x36 + x48 + 2*x61 + 2*x62 + x76 + x77 + 5*x8 + 5*x9;
s_out.channel[3]<<x79;
s_out.channel[2]<<x80;
s_out.channel[1]<<x81;
s_out.channel[0]<<x64 + x77 + MAJ(x81, x80, x79) + ep0(x81);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
}
}
void compress_16(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint w15=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=f + w2 + x8 + x9;
uint x11=b + x10;
uint x12=CH(x11, x7, x3);
uint x13=ep1(x11);
uint x14=MAJ(a, b, c);
uint x15=ep0(a);
uint x16=x14 + x15;
uint x17=x16 + x2;
uint x18=MAJ(x17, a, b);
uint x19=ep0(x17);
uint x20=x18 + x19;
uint x21=x20 + x6;
uint x22=MAJ(x21, x17, a);
uint x23=ep0(x21);
uint x24=x22 + x23;
uint x25=x10 + x24;
uint x26=MAJ(x25, x21, x17);
uint x27=ep0(x25);
uint x28=x26 + x27;
uint x29=e + w3 + x12 + x13;
uint x30=a + x29;
uint x31=CH(x30, x11, x7);
uint x32=ep1(x30);
uint x33=w4 + x31 + x32;
uint x34=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x16 + x33;
uint x35=CH(x34, x30, x11);
uint x36=ep1(x34);
uint x37=w5 + x35 + x36;
uint x38=c + 2*g + 2*w1 + x20 + x37 + 2*x4 + 2*x5;
uint x39=CH(x38, x34, x30);
uint x40=ep1(x38);
uint x41=w6 + x39 + x40;
uint x42=b + 2*f + 2*w2 + x24 + x41 + 2*x8 + 2*x9;
uint x43=CH(x42, x38, x34);
uint x44=ep1(x42);
uint x45=w7 + x43 + x44;
uint x46=a + 2*e + 2*w3 + 2*x12 + 2*x13 + x28 + x45;
uint x47=CH(x46, x42, x38);
uint x48=ep1(x46);
uint x49=x28 + x29;
uint x50=MAJ(x49, x25, x21) + ep0(x49);
uint x51=x3 + x33 + x50;
uint x52=MAJ(x51, x49, x25) + ep0(x51);
uint x53=x37 + x52 + x7;
uint x54=MAJ(x53, x51, x49) + ep0(x53);
uint x55=x11 + x41 + x54;
uint x56=MAJ(x55, x53, x51) + ep0(x55);
uint x57=x30 + x45 + x56;
uint x58=MAJ(x57, x55, x53) + ep0(x57);
uint x59=w8 + x47 + x48;
uint x60=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + x16 + 2*x31 + 2*x32 + x50 + x59;
uint x61=CH(x60, x46, x42);
uint x62=ep1(x60);
uint x63=w9 + x61 + x62;
uint x64=2*c + 3*g + 3*w1 + 2*w5 + x20 + 2*x35 + 2*x36 + 3*x4 + 3*x5 + x52 + x63;
uint x65=CH(x64, x60, x46);
uint x66=ep1(x64);
uint x67=w10 + x65 + x66;
uint x68=2*b + 3*f + 3*w2 + 2*w6 + x24 + 2*x39 + 2*x40 + x54 + x67 + 3*x8 + 3*x9;
uint x69=CH(x68, x64, x60);
uint x70=ep1(x68);
uint x71=w11 + x69 + x70;
uint x72=2*a + 3*e + 3*w3 + 2*w7 + 3*x12 + 3*x13 + x28 + 2*x43 + 2*x44 + x56 + x71;
uint x73=w12 + CH(x72, x68, x64) + ep1(x72);
uint x74=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 2*x14 + 2*x15 + 3*x31 + 3*x32 + 2*x47 + 2*x48 + x50 + x58 + x73;
uint x75=x34 + x58 + x59;
uint x76=MAJ(x75, x57, x55) + ep0(x75);
uint x77=w13 + CH(x74, x72, x68) + ep1(x74);
uint x78=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x18 + 2*x19 + 3*x35 + 3*x36 + 5*x4 + 5*x5 + x52 + 2*x61 + 2*x62 + x76 + x77;
uint x79=x38 + x63 + x76;
uint x80=MAJ(x79, x75, x57) + ep0(x79);
uint x81=w14 + CH(x78, x74, x72) + ep1(x78);
uint x82=3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 2*x22 + 2*x23 + 3*x39 + 3*x40 + x54 + 2*x65 + 2*x66 + 5*x8 + x80 + x81 + 5*x9;
uint x83=x42 + x67 + x80;
uint x84=MAJ(x83, x79, x75) + ep0(x83);
uint x85=w15 + CH(x82, x78, x74) + ep1(x82);
uint x86=x46 + x71 + x84;
uint x87=x60 + x73 + MAJ(x86, x83, x79) + ep0(x86);
uint x88=x64 + x77 + MAJ(x87, x86, x83) + ep0(x87);
uint x89=x68 + x81 + MAJ(x88, x87, x86) + ep0(x88);
s_out.channel[7]<<x74;
s_out.channel[6]<<x78;
s_out.channel[5]<<x82;
s_out.channel[4]<<3*a + 5*e + 2*w11 + 5*w3 + 3*w7 + 5*x12 + 5*x13 + 2*x26 + 2*x27 + 3*x43 + 3*x44 + x56 + 2*x69 + 2*x70 + x84 + x85;
s_out.channel[3]<<x87;
s_out.channel[2]<<x88;
s_out.channel[1]<<x89;
s_out.channel[0]<<x72 + x85 + MAJ(x89, x88, x87) + ep0(x89);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
w[bc+31]=w[bc+15]+SIG0(w[bc+16])+w[bc+24]+SIG1(w[bc+29]);
}
}
void compress_17(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint w15=w.channel[ch++].read();
uint w16=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=f + w2 + x8 + x9;
uint x11=b + x10;
uint x12=CH(x11, x7, x3);
uint x13=ep1(x11);
uint x14=e + w3 + x12 + x13;
uint x15=a + x14;
uint x16=CH(x15, x11, x7);
uint x17=ep1(x15);
uint x18=MAJ(a, b, c);
uint x19=ep0(a);
uint x20=x18 + x19;
uint x21=x2 + x20;
uint x22=MAJ(x21, a, b);
uint x23=ep0(x21);
uint x24=x22 + x23;
uint x25=x24 + x6;
uint x26=MAJ(x25, x21, a);
uint x27=ep0(x25);
uint x28=x26 + x27;
uint x29=x10 + x28;
uint x30=MAJ(x29, x25, x21);
uint x31=ep0(x29);
uint x32=x30 + x31;
uint x33=x14 + x32;
uint x34=MAJ(x33, x29, x25);
uint x35=ep0(x33);
uint x36=x34 + x35;
uint x37=w4 + x16 + x17;
uint x38=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x20 + x37;
uint x39=CH(x38, x15, x11);
uint x40=ep1(x38);
uint x41=w5 + x39 + x40;
uint x42=c + 2*g + 2*w1 + x24 + 2*x4 + x41 + 2*x5;
uint x43=CH(x42, x38, x15);
uint x44=ep1(x42);
uint x45=w6 + x43 + x44;
uint x46=b + 2*f + 2*w2 + x28 + x45 + 2*x8 + 2*x9;
uint x47=CH(x46, x42, x38);
uint x48=ep1(x46);
uint x49=w7 + x47 + x48;
uint x50=a + 2*e + 2*w3 + 2*x12 + 2*x13 + x32 + x49;
uint x51=CH(x50, x46, x42);
uint x52=ep1(x50);
uint x53=w8 + x51 + x52;
uint x54=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x16 + 2*x17 + x20 + x36 + x53;
uint x55=CH(x54, x50, x46);
uint x56=ep1(x54);
uint x57=x3 + x36 + x37;
uint x58=MAJ(x57, x33, x29) + ep0(x57);
uint x59=x41 + x58 + x7;
uint x60=MAJ(x59, x57, x33) + ep0(x59);
uint x61=x11 + x45 + x60;
uint x62=MAJ(x61, x59, x57) + ep0(x61);
uint x63=x15 + x49 + x62;
uint x64=MAJ(x63, x61, x59) + ep0(x63);
uint x65=x38 + x53 + x64;
uint x66=MAJ(x65, x63, x61) + ep0(x65);
uint x67=w9 + x55 + x56;
uint x68=2*c + 3*g + 3*w1 + 2*w5 + x24 + 2*x39 + 3*x4 + 2*x40 + 3*x5 + x58 + x67;
uint x69=CH(x68, x54, x50);
uint x70=ep1(x68);
uint x71=w10 + x69 + x70;
uint x72=2*b + 3*f + 3*w2 + 2*w6 + x28 + 2*x43 + 2*x44 + x60 + x71 + 3*x8 + 3*x9;
uint x73=CH(x72, x68, x54);
uint x74=ep1(x72);
uint x75=w11 + x73 + x74;
uint x76=2*a + 3*e + 3*w3 + 2*w7 + 3*x12 + 3*x13 + x32 + 2*x47 + 2*x48 + x62 + x75;
uint x77=CH(x76, x72, x68);
uint x78=ep1(x76);
uint x79=w12 + x77 + x78;
uint x80=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 3*x16 + 3*x17 + 2*x18 + 2*x19 + x36 + 2*x51 + 2*x52 + x64 + x79;
uint x81=w13 + CH(x80, x76, x72) + ep1(x80);
uint x82=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x22 + 2*x23 + 3*x39 + 5*x4 + 3*x40 + 5*x5 + 2*x55 + 2*x56 + x58 + x66 + x81;
uint x83=x42 + x66 + x67;
uint x84=MAJ(x83, x65, x63) + ep0(x83);
uint x85=w14 + CH(x82, x80, x76) + ep1(x82);
uint x86=3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 2*x26 + 2*x27 + 3*x43 + 3*x44 + x60 + 2*x69 + 2*x70 + 5*x8 + x84 + x85 + 5*x9;
uint x87=x46 + x71 + x84;
uint x88=MAJ(x87, x83, x65) + ep0(x87);
uint x89=w15 + CH(x86, x82, x80) + ep1(x86);
uint x90=3*a + 5*e + 2*w11 + 5*w3 + 3*w7 + 5*x12 + 5*x13 + 2*x30 + 2*x31 + 3*x47 + 3*x48 + x62 + 2*x73 + 2*x74 + x88 + x89;
uint x91=x50 + x75 + x88;
uint x92=MAJ(x91, x87, x83) + ep0(x91);
uint x93=w16 + CH(x90, x86, x82) + ep1(x90);
uint x94=x54 + x79 + x92;
uint x95=x68 + x81 + MAJ(x94, x91, x87) + ep0(x94);
uint x96=x72 + x85 + MAJ(x95, x94, x91) + ep0(x95);
uint x97=x76 + x89 + MAJ(x96, x95, x94) + ep0(x96);
s_out.channel[7]<<x82;
s_out.channel[6]<<x86;
s_out.channel[5]<<x90;
s_out.channel[4]<<5*d + 8*h + 8*w0 + 2*w12 + 5*w4 + 3*w8 + 8*x0 + 8*x1 + 5*x16 + 5*x17 + 3*x18 + 3*x19 + 2*x34 + 2*x35 + 3*x51 + 3*x52 + x64 + 2*x77 + 2*x78 + x92 + x93;
s_out.channel[3]<<x95;
s_out.channel[2]<<x96;
s_out.channel[1]<<x97;
s_out.channel[0]<<x80 + x93 + MAJ(x97, x96, x95) + ep0(x97);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
w[bc+31]=w[bc+15]+SIG0(w[bc+16])+w[bc+24]+SIG1(w[bc+29]);
w[bc+32]=w[bc+16]+SIG0(w[bc+17])+w[bc+25]+SIG1(w[bc+30]);
}
}
void compress_18(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint w15=w.channel[ch++].read();
uint w16=w.channel[ch++].read();
uint w17=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=MAJ(a, b, c);
uint x3=ep0(a);
uint x4=x2 + x3;
uint x5=h + w0 + x0 + x1;
uint x6=d + x5;
uint x7=CH(x6, e, f);
uint x8=ep1(x6);
uint x9=g + w1 + x7 + x8;
uint x10=c + x9;
uint x11=CH(x10, x6, e);
uint x12=ep1(x10);
uint x13=f + w2 + x11 + x12;
uint x14=b + x13;
uint x15=CH(x14, x10, x6);
uint x16=ep1(x14);
uint x17=e + w3 + x15 + x16;
uint x18=a + x17;
uint x19=CH(x18, x14, x10);
uint x20=ep1(x18);
uint x21=w4 + x19 + x20;
uint x22=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x21 + x4;
uint x23=CH(x22, x18, x14);
uint x24=ep1(x22);
uint x25=x4 + x5;
uint x26=MAJ(x25, a, b);
uint x27=ep0(x25);
uint x28=x26 + x27;
uint x29=x28 + x9;
uint x30=MAJ(x29, x25, a);
uint x31=ep0(x29);
uint x32=x30 + x31;
uint x33=x13 + x32;
uint x34=MAJ(x33, x29, x25);
uint x35=ep0(x33);
uint x36=x34 + x35;
uint x37=x17 + x36;
uint x38=MAJ(x37, x33, x29);
uint x39=ep0(x37);
uint x40=x38 + x39;
uint x41=x21 + x40 + x6;
uint x42=MAJ(x41, x37, x33);
uint x43=ep0(x41);
uint x44=x42 + x43;
uint x45=w5 + x23 + x24;
uint x46=c + 2*g + 2*w1 + x28 + x45 + 2*x7 + 2*x8;
uint x47=CH(x46, x22, x18);
uint x48=ep1(x46);
uint x49=w6 + x47 + x48;
uint x50=b + 2*f + 2*w2 + 2*x11 + 2*x12 + x32 + x49;
uint x51=CH(x50, x46, x22);
uint x52=ep1(x50);
uint x53=w7 + x51 + x52;
uint x54=a + 2*e + 2*w3 + 2*x15 + 2*x16 + x36 + x53;
uint x55=CH(x54, x50, x46);
uint x56=ep1(x54);
uint x57=w8 + x55 + x56;
uint x58=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x19 + 2*x20 + x4 + x40 + x57;
uint x59=CH(x58, x54, x50);
uint x60=ep1(x58);
uint x61=w9 + x59 + x60;
uint x62=2*c + 3*g + 3*w1 + 2*w5 + 2*x23 + 2*x24 + x28 + x44 + x61 + 3*x7 + 3*x8;
uint x63=CH(x62, x58, x54);
uint x64=ep1(x62);
uint x65=x10 + x44 + x45;
uint x66=MAJ(x65, x41, x37) + ep0(x65);
uint x67=x14 + x49 + x66;
uint x68=MAJ(x67, x65, x41) + ep0(x67);
uint x69=x18 + x53 + x68;
uint x70=MAJ(x69, x67, x65) + ep0(x69);
uint x71=x22 + x57 + x70;
uint x72=MAJ(x71, x69, x67) + ep0(x71);
uint x73=x46 + x61 + x72;
uint x74=MAJ(x73, x71, x69) + ep0(x73);
uint x75=w10 + x63 + x64;
uint x76=2*b + 3*f + 3*w2 + 2*w6 + 3*x11 + 3*x12 + x32 + 2*x47 + 2*x48 + x66 + x75;
uint x77=CH(x76, x62, x58);
uint x78=ep1(x76);
uint x79=w11 + x77 + x78;
uint x80=2*a + 3*e + 3*w3 + 2*w7 + 3*x15 + 3*x16 + x36 + 2*x51 + 2*x52 + x68 + x79;
uint x81=CH(x80, x76, x62);
uint x82=ep1(x80);
uint x83=w12 + x81 + x82;
uint x84=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 3*x19 + 2*x2 + 3*x20 + 2*x3 + x40 + 2*x55 + 2*x56 + x70 + x83;
uint x85=CH(x84, x80, x76);
uint x86=ep1(x84);
uint x87=w13 + x85 + x86;
uint x88=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 3*x23 + 3*x24 + 2*x26 + 2*x27 + x44 + 2*x59 + 2*x60 + 5*x7 + x72 + 5*x8 + x87;
uint x89=w14 + CH(x88, x84, x80) + ep1(x88);
uint x90=3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 5*x11 + 5*x12 + 2*x30 + 2*x31 + 3*x47 + 3*x48 + 2*x63 + 2*x64 + x66 + x74 + x89;
uint x91=x50 + x74 + x75;
uint x92=MAJ(x91, x73, x71) + ep0(x91);
uint x93=w15 + CH(x90, x88, x84) + ep1(x90);
uint x94=3*a + 5*e + 2*w11 + 5*w3 + 3*w7 + 5*x15 + 5*x16 + 2*x34 + 2*x35 + 3*x51 + 3*x52 + x68 + 2*x77 + 2*x78 + x92 + x93;
uint x95=x54 + x79 + x92;
uint x96=MAJ(x95, x91, x73) + ep0(x95);
uint x97=w16 + CH(x94, x90, x88) + ep1(x94);
uint x98=5*d + 8*h + 8*w0 + 2*w12 + 5*w4 + 3*w8 + 8*x0 + 8*x1 + 5*x19 + 3*x2 + 5*x20 + 3*x3 + 2*x38 + 2*x39 + 3*x55 + 3*x56 + x70 + 2*x81 + 2*x82 + x96 + x97;
uint x99=x58 + x83 + x96;
uint x100=MAJ(x99, x95, x91) + ep0(x99);
uint x101=w17 + CH(x98, x94, x90) + ep1(x98);
uint x102=x100 + x62 + x87;
uint x103=x76 + x89 + MAJ(x102, x99, x95) + ep0(x102);
uint x104=x80 + x93 + MAJ(x103, x102, x99) + ep0(x103);
uint x105=x84 + x97 + MAJ(x104, x103, x102) + ep0(x104);
s_out.channel[7]<<x90;
s_out.channel[6]<<x94;
s_out.channel[5]<<x98;
s_out.channel[4]<<5*c + 8*g + 8*w1 + 2*w13 + 5*w5 + 3*w9 + x100 + x101 + 5*x23 + 5*x24 + 3*x26 + 3*x27 + 2*x42 + 2*x43 + 3*x59 + 3*x60 + 8*x7 + x72 + 8*x8 + 2*x85 + 2*x86;
s_out.channel[3]<<x103;
s_out.channel[2]<<x104;
s_out.channel[1]<<x105;
s_out.channel[0]<<x101 + x88 + MAJ(x105, x104, x103) + ep0(x105);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
w[bc+31]=w[bc+15]+SIG0(w[bc+16])+w[bc+24]+SIG1(w[bc+29]);
w[bc+32]=w[bc+16]+SIG0(w[bc+17])+w[bc+25]+SIG1(w[bc+30]);
w[bc+33]=w[bc+17]+SIG0(w[bc+18])+w[bc+26]+SIG1(w[bc+31]);
}
}
void compress_19(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint w15=w.channel[ch++].read();
uint w16=w.channel[ch++].read();
uint w17=w.channel[ch++].read();
uint w18=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=MAJ(a, b, c);
uint x7=ep0(a);
uint x8=x6 + x7;
uint x9=x2 + x8;
uint x10=MAJ(x9, a, b);
uint x11=ep0(x9);
uint x12=x10 + x11;
uint x13=g + w1 + x4 + x5;
uint x14=c + x13;
uint x15=CH(x14, x3, e);
uint x16=ep1(x14);
uint x17=f + w2 + x15 + x16;
uint x18=b + x17;
uint x19=CH(x18, x14, x3);
uint x20=ep1(x18);
uint x21=e + w3 + x19 + x20;
uint x22=a + x21;
uint x23=CH(x22, x18, x14);
uint x24=ep1(x22);
uint x25=w4 + x23 + x24;
uint x26=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x25 + x8;
uint x27=CH(x26, x22, x18);
uint x28=ep1(x26);
uint x29=w5 + x27 + x28;
uint x30=c + 2*g + 2*w1 + x12 + x29 + 2*x4 + 2*x5;
uint x31=CH(x30, x26, x22);
uint x32=ep1(x30);
uint x33=x12 + x13;
uint x34=MAJ(x33, x9, a);
uint x35=ep0(x33);
uint x36=x34 + x35;
uint x37=x17 + x36;
uint x38=MAJ(x37, x33, x9);
uint x39=ep0(x37);
uint x40=x38 + x39;
uint x41=x21 + x40;
uint x42=MAJ(x41, x37, x33);
uint x43=ep0(x41);
uint x44=x42 + x43;
uint x45=x25 + x3 + x44;
uint x46=MAJ(x45, x41, x37);
uint x47=ep0(x45);
uint x48=x46 + x47;
uint x49=x14 + x29 + x48;
uint x50=MAJ(x49, x45, x41);
uint x51=ep0(x49);
uint x52=x50 + x51;
uint x53=w6 + x31 + x32;
uint x54=b + 2*f + 2*w2 + 2*x15 + 2*x16 + x36 + x53;
uint x55=CH(x54, x30, x26);
uint x56=ep1(x54);
uint x57=w7 + x55 + x56;
uint x58=a + 2*e + 2*w3 + 2*x19 + 2*x20 + x40 + x57;
uint x59=CH(x58, x54, x30);
uint x60=ep1(x58);
uint x61=w8 + x59 + x60;
uint x62=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + 2*x23 + 2*x24 + x44 + x61 + x8;
uint x63=CH(x62, x58, x54);
uint x64=ep1(x62);
uint x65=w9 + x63 + x64;
uint x66=2*c + 3*g + 3*w1 + 2*w5 + x12 + 2*x27 + 2*x28 + 3*x4 + x48 + 3*x5 + x65;
uint x67=CH(x66, x62, x58);
uint x68=ep1(x66);
uint x69=w10 + x67 + x68;
uint x70=2*b + 3*f + 3*w2 + 2*w6 + 3*x15 + 3*x16 + 2*x31 + 2*x32 + x36 + x52 + x69;
uint x71=CH(x70, x66, x62);
uint x72=ep1(x70);
uint x73=x18 + x52 + x53;
uint x74=MAJ(x73, x49, x45) + ep0(x73);
uint x75=x22 + x57 + x74;
uint x76=MAJ(x75, x73, x49) + ep0(x75);
uint x77=x26 + x61 + x76;
uint x78=MAJ(x77, x75, x73) + ep0(x77);
uint x79=x30 + x65 + x78;
uint x80=MAJ(x79, x77, x75) + ep0(x79);
uint x81=x54 + x69 + x80;
uint x82=MAJ(x81, x79, x77) + ep0(x81);
uint x83=w11 + x71 + x72;
uint x84=2*a + 3*e + 3*w3 + 2*w7 + 3*x19 + 3*x20 + x40 + 2*x55 + 2*x56 + x74 + x83;
uint x85=CH(x84, x70, x66);
uint x86=ep1(x84);
uint x87=w12 + x85 + x86;
uint x88=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 3*x23 + 3*x24 + x44 + 2*x59 + 2*x6 + 2*x60 + 2*x7 + x76 + x87;
uint x89=CH(x88, x84, x70);
uint x90=ep1(x88);
uint x91=w13 + x89 + x90;
uint x92=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x10 + 2*x11 + 3*x27 + 3*x28 + 5*x4 + x48 + 5*x5 + 2*x63 + 2*x64 + x78 + x91;
uint x93=CH(x92, x88, x84);
uint x94=ep1(x92);
uint x95=w14 + x93 + x94;
uint x96=3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 5*x15 + 5*x16 + 3*x31 + 3*x32 + 2*x34 + 2*x35 + x52 + 2*x67 + 2*x68 + x80 + x95;
uint x97=w15 + CH(x96, x92, x88) + ep1(x96);
uint x98=3*a + 5*e + 2*w11 + 5*w3 + 3*w7 + 5*x19 + 5*x20 + 2*x38 + 2*x39 + 3*x55 + 3*x56 + 2*x71 + 2*x72 + x74 + x82 + x97;
uint x99=x58 + x82 + x83;
uint x100=MAJ(x99, x81, x79) + ep0(x99);
uint x101=w16 + CH(x98, x96, x92) + ep1(x98);
uint x102=5*d + 8*h + 8*w0 + 2*w12 + 5*w4 + 3*w8 + 8*x0 + 8*x1 + x100 + x101 + 5*x23 + 5*x24 + 2*x42 + 2*x43 + 3*x59 + 3*x6 + 3*x60 + 3*x7 + x76 + 2*x85 + 2*x86;
uint x103=x100 + x62 + x87;
uint x104=MAJ(x103, x99, x81) + ep0(x103);
uint x105=w17 + CH(x102, x98, x96) + ep1(x102);
uint x106=5*c + 8*g + 8*w1 + 2*w13 + 5*w5 + 3*w9 + 3*x10 + x104 + x105 + 3*x11 + 5*x27 + 5*x28 + 8*x4 + 2*x46 + 2*x47 + 8*x5 + 3*x63 + 3*x64 + x78 + 2*x89 + 2*x90;
uint x107=x104 + x66 + x91;
uint x108=MAJ(x107, x103, x99) + ep0(x107);
uint x109=w18 + CH(x106, x102, x98) + ep1(x106);
uint x110=x108 + x70 + x95;
uint x111=x84 + x97 + MAJ(x110, x107, x103) + ep0(x110);
uint x112=x101 + x88 + MAJ(x111, x110, x107) + ep0(x111);
uint x113=x105 + x92 + MAJ(x112, x111, x110) + ep0(x112);
s_out.channel[7]<<x98;
s_out.channel[6]<<x102;
s_out.channel[5]<<x106;
s_out.channel[4]<<5*b + 8*f + 3*w10 + 2*w14 + 8*w2 + 5*w6 + x108 + x109 + 8*x15 + 8*x16 + 5*x31 + 5*x32 + 3*x34 + 3*x35 + 2*x50 + 2*x51 + 3*x67 + 3*x68 + x80 + 2*x93 + 2*x94;
s_out.channel[3]<<x111;
s_out.channel[2]<<x112;
s_out.channel[1]<<x113;
s_out.channel[0]<<x109 + x96 + MAJ(x113, x112, x111) + ep0(x113);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
w[bc+31]=w[bc+15]+SIG0(w[bc+16])+w[bc+24]+SIG1(w[bc+29]);
w[bc+32]=w[bc+16]+SIG0(w[bc+17])+w[bc+25]+SIG1(w[bc+30]);
w[bc+33]=w[bc+17]+SIG0(w[bc+18])+w[bc+26]+SIG1(w[bc+31]);
w[bc+34]=w[bc+18]+SIG0(w[bc+19])+w[bc+27]+SIG1(w[bc+32]);
}
}
void compress_20(hls::stream<uint> w[], hls::stream<uint> s_in[], hls::stream<uint> s_out[],ap_uint<BIT_WCH> &ch)
{
#pragma HLS INLINE off
uint w0=w.channel[ch++].read();
uint w1=w.channel[ch++].read();
uint w2=w.channel[ch++].read();
uint w3=w.channel[ch++].read();
uint w4=w.channel[ch++].read();
uint w5=w.channel[ch++].read();
uint w6=w.channel[ch++].read();
uint w7=w.channel[ch++].read();
uint w8=w.channel[ch++].read();
uint w9=w.channel[ch++].read();
uint w10=w.channel[ch++].read();
uint w11=w.channel[ch++].read();
uint w12=w.channel[ch++].read();
uint w13=w.channel[ch++].read();
uint w14=w.channel[ch++].read();
uint w15=w.channel[ch++].read();
uint w16=w.channel[ch++].read();
uint w17=w.channel[ch++].read();
uint w18=w.channel[ch++].read();
uint w19=w.channel[ch++].read();
uint a=s_in.channel[0].read();
uint b=s_in.channel[1].read();;
uint c=s_in.channel[2].read();;
uint d=s_in.channel[3].read();;
uint e=s_in.channel[4].read();;
uint f=s_in.channel[5].read();;
uint g=s_in.channel[6].read();;
uint h=s_in.channel[7].read();;
uint x0=CH(e, f, g);
uint x1=ep1(e);
uint x2=h + w0 + x0 + x1;
uint x3=d + x2;
uint x4=CH(x3, e, f);
uint x5=ep1(x3);
uint x6=g + w1 + x4 + x5;
uint x7=c + x6;
uint x8=CH(x7, x3, e);
uint x9=ep1(x7);
uint x10=MAJ(a, b, c);
uint x11=ep0(a);
uint x12=x10 + x11;
uint x13=x12 + x2;
uint x14=MAJ(x13, a, b);
uint x15=ep0(x13);
uint x16=x14 + x15;
uint x17=x16 + x6;
uint x18=MAJ(x17, x13, a);
uint x19=ep0(x17);
uint x20=x18 + x19;
uint x21=f + w2 + x8 + x9;
uint x22=b + x21;
uint x23=CH(x22, x7, x3);
uint x24=ep1(x22);
uint x25=e + w3 + x23 + x24;
uint x26=a + x25;
uint x27=CH(x26, x22, x7);
uint x28=ep1(x26);
uint x29=w4 + x27 + x28;
uint x30=d + 2*h + 2*w0 + 2*x0 + 2*x1 + x12 + x29;
uint x31=CH(x30, x26, x22);
uint x32=ep1(x30);
uint x33=w5 + x31 + x32;
uint x34=c + 2*g + 2*w1 + x16 + x33 + 2*x4 + 2*x5;
uint x35=CH(x34, x30, x26);
uint x36=ep1(x34);
uint x37=w6 + x35 + x36;
uint x38=b + 2*f + 2*w2 + x20 + x37 + 2*x8 + 2*x9;
uint x39=CH(x38, x34, x30);
uint x40=ep1(x38);
uint x41=x20 + x21;
uint x42=MAJ(x41, x17, x13);
uint x43=ep0(x41);
uint x44=x42 + x43;
uint x45=x25 + x44;
uint x46=MAJ(x45, x41, x17);
uint x47=ep0(x45);
uint x48=x46 + x47;
uint x49=x29 + x3 + x48;
uint x50=MAJ(x49, x45, x41);
uint x51=ep0(x49);
uint x52=x50 + x51;
uint x53=x33 + x52 + x7;
uint x54=MAJ(x53, x49, x45);
uint x55=ep0(x53);
uint x56=x54 + x55;
uint x57=x22 + x37 + x56;
uint x58=MAJ(x57, x53, x49);
uint x59=ep0(x57);
uint x60=x58 + x59;
uint x61=w7 + x39 + x40;
uint x62=a + 2*e + 2*w3 + 2*x23 + 2*x24 + x44 + x61;
uint x63=CH(x62, x38, x34);
uint x64=ep1(x62);
uint x65=w8 + x63 + x64;
uint x66=2*d + 3*h + 3*w0 + 2*w4 + 3*x0 + 3*x1 + x12 + 2*x27 + 2*x28 + x48 + x65;
uint x67=CH(x66, x62, x38);
uint x68=ep1(x66);
uint x69=w9 + x67 + x68;
uint x70=2*c + 3*g + 3*w1 + 2*w5 + x16 + 2*x31 + 2*x32 + 3*x4 + 3*x5 + x52 + x69;
uint x71=CH(x70, x66, x62);
uint x72=ep1(x70);
uint x73=w10 + x71 + x72;
uint x74=2*b + 3*f + 3*w2 + 2*w6 + x20 + 2*x35 + 2*x36 + x56 + x73 + 3*x8 + 3*x9;
uint x75=CH(x74, x70, x66);
uint x76=ep1(x74);
uint x77=w11 + x75 + x76;
uint x78=2*a + 3*e + 3*w3 + 2*w7 + 3*x23 + 3*x24 + 2*x39 + 2*x40 + x44 + x60 + x77;
uint x79=CH(x78, x74, x70);
uint x80=ep1(x78);
uint x81=x26 + x60 + x61;
uint x82=MAJ(x81, x57, x53) + ep0(x81);
uint x83=x30 + x65 + x82;
uint x84=MAJ(x83, x81, x57) + ep0(x83);
uint x85=x34 + x69 + x84;
uint x86=MAJ(x85, x83, x81) + ep0(x85);
uint x87=x38 + x73 + x86;
uint x88=MAJ(x87, x85, x83) + ep0(x87);
uint x89=x62 + x77 + x88;
uint x90=MAJ(x89, x87, x85) + ep0(x89);
uint x91=w12 + x79 + x80;
uint x92=3*d + 5*h + 5*w0 + 3*w4 + 2*w8 + 5*x0 + 5*x1 + 2*x10 + 2*x11 + 3*x27 + 3*x28 + x48 + 2*x63 + 2*x64 + x82 + x91;
uint x93=CH(x92, x78, x74);
uint x94=ep1(x92);
uint x95=w13 + x93 + x94;
uint x96=3*c + 5*g + 5*w1 + 3*w5 + 2*w9 + 2*x14 + 2*x15 + 3*x31 + 3*x32 + 5*x4 + 5*x5 + x52 + 2*x67 + 2*x68 + x84 + x95;
uint x97=CH(x96, x92, x78);
uint x98=ep1(x96);
uint x99=w14 + x97 + x98;
uint x100=3*b + 5*f + 2*w10 + 5*w2 + 3*w6 + 2*x18 + 2*x19 + 3*x35 + 3*x36 + x56 + 2*x71 + 2*x72 + 5*x8 + x86 + 5*x9 + x99;
uint x101=CH(x100, x96, x92);
uint x102=ep1(x100);
uint x103=w15 + x101 + x102;
uint x104=3*a + 5*e + 2*w11 + 5*w3 + 3*w7 + x103 + 5*x23 + 5*x24 + 3*x39 + 3*x40 + 2*x42 + 2*x43 + x60 + 2*x75 + 2*x76 + x88;
uint x105=w16 + CH(x104, x100, x96) + ep1(x104);
uint x106=5*d + 8*h + 8*w0 + 2*w12 + 5*w4 + 3*w8 + 8*x0 + 8*x1 + 3*x10 + x105 + 3*x11 + 5*x27 + 5*x28 + 2*x46 + 2*x47 + 3*x63 + 3*x64 + 2*x79 + 2*x80 + x82 + x90;
uint x107=x66 + x90 + x91;
uint x108=MAJ(x107, x89, x87) + ep0(x107);
uint x109=w17 + CH(x106, x104, x100) + ep1(x106);
uint x110=5*c + 8*g + 8*w1 + 2*w13 + 5*w5 + 3*w9 + x108 + x109 + 3*x14 + 3*x15 + 5*x31 + 5*x32 + 8*x4 + 8*x5 + 2*x50 + 2*x51 + 3*x67 + 3*x68 + x84 + 2*x93 + 2*x94;
uint x111=x108 + x70 + x95;
uint x112=MAJ(x111, x107, x89) + ep0(x111);
uint x113=w18 + CH(x110, x106, x104) + ep1(x110);
uint x114=5*b + 8*f + 3*w10 + 2*w14 + 8*w2 + 5*w6 + x112 + x113 + 3*x18 + 3*x19 + 5*x35 + 5*x36 + 2*x54 + 2*x55 + 3*x71 + 3*x72 + 8*x8 + x86 + 8*x9 + 2*x97 + 2*x98;
uint x115=x112 + x74 + x99;
uint x116=MAJ(x115, x111, x107) + ep0(x115);
uint x117=w19 + CH(x114, x110, x106) + ep1(x114);
uint x118=x103 + x116 + x78;
uint x119=x105 + x92 + MAJ(x118, x115, x111) + ep0(x118);
uint x120=x109 + x96 + MAJ(x119, x118, x115) + ep0(x119);
uint x121=x100 + x113 + MAJ(x120, x119, x118) + ep0(x120);
s_out.channel[7]<<x106;
s_out.channel[6]<<x110;
s_out.channel[5]<<x114;
s_out.channel[4]<<5*a + 8*e + 3*w11 + 2*w15 + 8*w3 + 5*w7 + 2*x101 + 2*x102 + x116 + x117 + 8*x23 + 8*x24 + 5*x39 + 5*x40 + 3*x42 + 3*x43 + 2*x58 + 2*x59 + 3*x75 + 3*x76 + x88;
s_out.channel[3]<<x119;
s_out.channel[2]<<x120;
s_out.channel[1]<<x121;
s_out.channel[0]<<x104 + x117 + MAJ(x121, x120, x119) + ep0(x121);
if(bc<48){
w[bc+16]=w[bc]+SIG0(w[bc+1])+w[bc+9]+SIG1(w[bc+14]);
w[bc+17]=w[bc+1]+SIG0(w[bc+2])+w[bc+10]+SIG1(w[bc+15]);
w[bc+18]=w[bc+2]+SIG0(w[bc+3])+w[bc+11]+SIG1(w[bc+16]);
w[bc+19]=w[bc+3]+SIG0(w[bc+4])+w[bc+12]+SIG1(w[bc+17]);
w[bc+20]=w[bc+4]+SIG0(w[bc+5])+w[bc+13]+SIG1(w[bc+18]);
w[bc+21]=w[bc+5]+SIG0(w[bc+6])+w[bc+14]+SIG1(w[bc+19]);
w[bc+22]=w[bc+6]+SIG0(w[bc+7])+w[bc+15]+SIG1(w[bc+20]);
w[bc+23]=w[bc+7]+SIG0(w[bc+8])+w[bc+16]+SIG1(w[bc+21]);
w[bc+24]=w[bc+8]+SIG0(w[bc+9])+w[bc+17]+SIG1(w[bc+22]);
w[bc+25]=w[bc+9]+SIG0(w[bc+10])+w[bc+18]+SIG1(w[bc+23]);
w[bc+26]=w[bc+10]+SIG0(w[bc+11])+w[bc+19]+SIG1(w[bc+24]);
w[bc+27]=w[bc+11]+SIG0(w[bc+12])+w[bc+20]+SIG1(w[bc+25]);
w[bc+28]=w[bc+12]+SIG0(w[bc+13])+w[bc+21]+SIG1(w[bc+26]);
w[bc+29]=w[bc+13]+SIG0(w[bc+14])+w[bc+22]+SIG1(w[bc+27]);
w[bc+30]=w[bc+14]+SIG0(w[bc+15])+w[bc+23]+SIG1(w[bc+28]);
w[bc+31]=w[bc+15]+SIG0(w[bc+16])+w[bc+24]+SIG1(w[bc+29]);
w[bc+32]=w[bc+16]+SIG0(w[bc+17])+w[bc+25]+SIG1(w[bc+30]);
w[bc+33]=w[bc+17]+SIG0(w[bc+18])+w[bc+26]+SIG1(w[bc+31]);
w[bc+34]=w[bc+18]+SIG0(w[bc+19])+w[bc+27]+SIG1(w[bc+32]);
w[bc+35]=w[bc+19]+SIG0(w[bc+20])+w[bc+28]+SIG1(w[bc+33]);
}
}

#endif
