#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "sha256.hpp"
#include "hls_stream.h"
#include "ap_axi_sdata.h"

#define LN 20

uchar res[]={0x61, 0x62, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18};
uchar hs[]={0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA, 0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23, 0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C, 0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD};
uchar fs[]={0x55, 0x69, 0x41, 0x0A, 0xBB, 0x92, 0x93, 0xF0, 0x7A, 0x26, 0xFD, 0x24, 0xCF, 0x30, 0xF4, 0x27, 0x7F, 0x4D, 0x7E, 0xE4, 0x0C, 0xDE, 0xFA, 0xCF, 0x0C, 0xD4, 0x32, 0x17, 0xCC, 0x23, 0x44, 0x14};

int main(void) {

	hls::stream<axis> in_stream;
	hls::stream<axis> out_stream;
	axis tmp;

	//tmp.keep=1;
	//tmp.strb=1;
	//tmp.user=1;
	tmp.last=0;
	//tmp.dest=1;
	unsigned int i;
	//uchar hash[32];
/*
	tmp.data = LN >> 24;
	in_stream.write(tmp);
	tmp.data = (LN >> 16) & 0xff;
	in_stream.write(tmp);
	tmp.data = (LN >> 8) & 0xff;
	in_stream.write(tmp);
	tmp.data = LN & 0xff;
	in_stream.write(tmp);
*/


	// generate data

	tmp.data=1;
	in_stream.write(tmp);
	for(i = 0; i < 600; i++){
		tmp.data=97+i%24;
		printf("%u ",97+i%24);
		in_stream.write(tmp);
	}
	printf("%u ",97+i%24);
	tmp.data=97+i%24;
	tmp.last=1;
	in_stream.write(tmp);

	tmp.data=0;
	in_stream.write(tmp);

	sha256(in_stream , out_stream);

	printf("\n");


	uint count=0;
	uint eq=0;
	//dataCh t;
	while(true)
	{
		tmp = out_stream.read();
		if((unsigned char)fs[count]!=(unsigned char)tmp.data) {
			//printf("0x%02X \n ",(unsigned char)tmp.data);
			eq=1;
		}
		//printf("%u:%02X, ",(unsigned char)count,(unsigned char)tmp.data);
		printf("0x%02X, ",(unsigned char)tmp.data);
		count++;
		if(tmp.last)
			break;

	}



	//return 0;
	return eq;
}
